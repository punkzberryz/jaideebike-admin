// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String    @id
  email          String?   @unique
  hashedPassword String?
  displayName    String
  role           Role      @default(USER)
  githubId       Int?      @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[]

  @@index([email])
  @@index([githubId])
}

enum Role {
  USER
  ADMIN
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Product Schemas
model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[] @relation("CategoryToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        Int       @id @default(autoincrement())
  name      String
  hexValue  String
  gradient  String? // Gradient Value
  products  Product[] @relation("ColorToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       String
  description String
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  categoryId  Int // Foreign Key to Category
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  colorId     Int // Foreign Key to Color
  color       Color       @relation("ColorToProduct", fields: [colorId], references: [id])
  images      Image[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]

  @@index([categoryId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

// customer may order more than one product at a time
// so we need to create a new table to store the order
model Order {
  id        String      @id @default(uuid())
  OrderItem OrderItem[] //Relation to OrderItem
  isPaid    Boolean     @default(false)
  phone     String      @default("")
  address   String      @default("")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
